@page "/Battle/BattleScreen"

@using ProjectBlazor.Data.Game
@using ProjectBlazor.Data.Game.General
@using ProjectBlazor.Data.Game.Battle
@inject ProjectBlazor.Data.Game.General.PbGame ProjectBlazorGame
@inject NavigationManager NavManager

<h3>BattleScreen</h3>

<table class="table table-bordered table-sm">
    <tr>
        <td width="50%">
            Player
        </td>
        <td width="50%">
            Enemy
        </td>
    </tr>
    <tr>
        <td>
            HP |  @ProjectBlazorGame.Battle.Player.GetHpCurrent() / @ProjectBlazorGame.Battle.Player.GetHpTotal()
            <br /><br />
            <label>@playerResult.Output</label>
        </td>
        <td>
            HP |  @ProjectBlazorGame.Battle.Enemy.GetHpCurrent() / @ProjectBlazorGame.Battle.Enemy.GetHpTotal()
            <br /><br />
            <label>@enemyResult.Output</label>
        </td>
    </tr>
    <tr>
        <td>
            <ProjectBlazor.Pages.Battle.AbilityButtons Abilities="@ProjectBlazorGame.Battle.Player.Abilities" UseAbilityFunction="@UseAbility" />
        </td>
        <td>
        </td>
    </tr>
    <tr>
        <td>
        </td>
        <td>
        </td>
    </tr>
</table>

@code {
    private void UseAbility(string abilityName)
    {
        if (ProjectBlazorGame.Battle.GetBattleResult() == PbTypes.BATTLE_RESULT.ONGOING)
        {
            ProjectBlazorGame.Battle.InputPlayerAction(abilityName);

            List<PbBattleActionResult> battleActionResults = ProjectBlazorGame.Battle.RunBattleTurn();
            ShowBattleResults(battleActionResults);
        }

        if (ProjectBlazorGame.Battle.GetBattleResult() != PbTypes.BATTLE_RESULT.ONGOING)
        {
            EndBattle();
        }
    }

    private void EndBattle()
    {
        ProjectBlazorGame.RewardPlayer(ProjectBlazorGame.Battle.GetBattleReward());
        ProjectBlazorGame.ResetBattle();
        NavManager.NavigateTo("/");
    }

    PbBattleActionResult playerResult = new PbBattleActionResult();
    PbBattleActionResult enemyResult = new PbBattleActionResult();

    private void ShowBattleResults(List<PbBattleActionResult> battleActionResults)
    {
        foreach (PbBattleActionResult result in battleActionResults)
        {
            if (result.Source.GetBattleParticipant() == PbTypes.BATTLE_PARTICIPANT.PLAYER)
            {
                enemyResult = result;
            }
            else if (result.Source.GetBattleParticipant() == PbTypes.BATTLE_PARTICIPANT.ENEMY)
            {
                playerResult = result;
            }
        }
    }
}
