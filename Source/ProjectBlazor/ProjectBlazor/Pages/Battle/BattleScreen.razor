@page "/Battle/BattleScreen"

@using System.Timers;
@using ProjectBlazor.Data.Game
@using ProjectBlazor.Data.Game.General
@using ProjectBlazor.Data.Game.Battle
@inject ProjectBlazor.Data.Game.General.PbGame ProjectBlazorGame
@inject NavigationManager NavManager


<h3>BattleScreen</h3>



<table class="table table-bordered table-sm">
    <tr>
        <td width="50%">
            <progress id="progPlayer" value="@ProjectBlazorGame.Battle.PlayerActionBar" max="1000.0"></progress>
        </td>
        <td width="50%">
            <progress id="progEnemy" value="@ProjectBlazorGame.Battle.EnemyActionBar" max="1000.0"></progress>
        </td>
    </tr>

    <tr>
        <td width="50%">
            Player
        </td>
        <td width="50%">
            Enemy
        </td>
    </tr>
    <tr>
        <td>
            HP |  @ProjectBlazorGame.Battle.Player.GetHpCurrent() / @ProjectBlazorGame.Battle.Player.GetHpTotal()
            <br /><br />
            AP |  @ProjectBlazorGame.Battle.Player.GetApCurrent() / @ProjectBlazorGame.Battle.Player.GetApTotal()
            <br /><br />
            <label>@playerResult</label>
        </td>
        <td>
            HP |  @ProjectBlazorGame.Battle.Enemy.GetHpCurrent() / @ProjectBlazorGame.Battle.Enemy.GetHpTotal()
            <br /><br />
            AP |  @ProjectBlazorGame.Battle.Enemy.GetApCurrent() / @ProjectBlazorGame.Battle.Enemy.GetApTotal()
            <br /><br />
            <label>@enemyResult</label>
        </td>
    </tr>
    <tr>
        <td>
            <ProjectBlazor.Pages.Battle.AbilityButtons AbilityActionBars="@ProjectBlazorGame.Battle.PlayerAbilityActionBars" UseAbilityFunction="@UseAbility" />
        </td>
        <td>
        </td>
    </tr>
    <tr>
        <td>
        </td>
        <td>
        </td>
    </tr>
</table>

@code {
    Timer battleTimer;

    protected override void OnInitialized()
    {
        ProjectBlazorGame.Battle.StartBattle();
        battleTimer = new Timer();
        battleTimer.Interval = 100;
        battleTimer.Elapsed += TimerOnElapsed;
        battleTimer.Start();
    }

    private void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        base.InvokeAsync(StateHasChanged);

        if (ProjectBlazorGame.Battle.GetBattleResult() != PbTypes.BATTLE_RESULT.ONGOING)
        {
            EndBattle();
        }
    }

    public void Dispose()
    {
        battleTimer.Dispose();
    }

    private void UseAbility(string abilityName)
    {
        if (ProjectBlazorGame.Battle.GetBattleResult() == PbTypes.BATTLE_RESULT.ONGOING)
        {
            if (ProjectBlazorGame.Battle.CanPlayerUseAbility(abilityName))
            {
                ProjectBlazorGame.Battle.InputPlayerAction(abilityName);

                List<PbBattleActionResult> battleActionResults = ProjectBlazorGame.Battle.RunBattleTurn();
                ShowBattleResults(battleActionResults);
            }

        }

        if (ProjectBlazorGame.Battle.GetBattleResult() != PbTypes.BATTLE_RESULT.ONGOING)
        {
            EndBattle();
        }
    }

    private void EndBattle()
    {
        ProjectBlazorGame.RewardPlayer(ProjectBlazorGame.Battle.GetBattleReward());
        ProjectBlazorGame.ResetBattle();
        NavManager.NavigateTo("/");
    }

    string playerResult = "";
    string enemyResult = "";

    private void ShowBattleResults(List<PbBattleActionResult> battleActionResults)
    {
        playerResult = "";
        enemyResult = "";

        foreach (PbBattleActionResult result in battleActionResults)
        {
            if (result.Source.GetBattleParticipant() == PbTypes.BATTLE_PARTICIPANT.PLAYER)
            {
                if (result.AbilityActionType == PbTypes.ABILITY_ACTION_TYPE.HEAL)
                {
                    playerResult += " + " + result.Output + " | ";
                }
                else
                {
                    enemyResult += " - " + result.Output + " | ";
                }
            }
            else if (result.Source.GetBattleParticipant() == PbTypes.BATTLE_PARTICIPANT.ENEMY)
            {
                if (result.AbilityActionType == PbTypes.ABILITY_ACTION_TYPE.HEAL)
                {
                    enemyResult += " + " + result.Output + " | ";
                }
                else
                {
                    playerResult += " - " + result.Output + " | ";
                }
            }
        }
    }
}
